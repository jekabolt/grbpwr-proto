syntax = "proto3";

package admin;

import "common/archive.proto";
import "common/dict.proto";
import "common/filter.proto";
import "common/hero.proto";
import "common/media.proto";
import "common/order.proto";
import "common/payment.proto";
import "common/product.proto";
import "common/promo.proto";
import "common/shipment.proto";
import "google/api/annotations.proto";
import "google/type/decimal.proto";

option go_package = "github.com/jekabolt/grbpwr-products-manager/proto/admin;admin";

service AdminService {
  // KEY VALUE DICTIONARY

  // Retrieves a key-value dictionary.
  rpc GetDictionary(GetDictionaryRequest) returns (GetDictionaryResponse) {
    option (google.api.http) = {get: "/api/admin/dictionary"};
  }

  // BUCKET MANAGER

  // UploadContentImage uploads an image to a specific folder with a specified name.
  rpc UploadContentImage(UploadContentImageRequest) returns (UploadContentImageResponse) {
    option (google.api.http) = {
      post: "/api/admin/content/image"
      body: "*"
    };
  }

  // UploadContentVideo uploads a video to a specific folder with a specified name.
  rpc UploadContentVideo(UploadContentVideoRequest) returns (UploadContentVideoResponse) {
    option (google.api.http) = {
      post: "/api/admin/content/video"
      body: "*"
    };
  }

  // DeleteFromBucket deletes objects specified by their keys.
  rpc DeleteFromBucket(DeleteFromBucketRequest) returns (DeleteFromBucketResponse) {
    option (google.api.http) = {delete: "/api/admin/content"};
  }

  // ListObjectsPaged lists all objects in the base folder.
  rpc ListObjectsPaged(ListObjectsPagedRequest) returns (ListObjectsPagedResponse) {
    option (google.api.http) = {get: "/api/admin/content"};
  }

  // PRODUCTS MANAGER

  // Adds a new product.
  rpc AddProduct(AddProductRequest) returns (AddProductResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/add"
      body: "*"
    };
  }

  // Retrieves a paginated list of products.
  rpc GetProductsPaged(GetProductsPagedRequest) returns (GetProductsPagedResponse) {
    option (google.api.http) = {get: "/api/admin/product/paged"};
  }

  // Gets a product by its ID.
  rpc GetProductByID(GetProductByIDRequest) returns (GetProductByIDResponse) {
    option (google.api.http) = {get: "/api/admin/product/{id}"};
  }

  // Deletes a product by its ID.
  rpc DeleteProductByID(DeleteProductByIDRequest) returns (DeleteProductByIDResponse) {
    option (google.api.http) = {delete: "/api/admin/product/{id}"};
  }

  // Hides a product by its ID.
  rpc HideProductByID(HideProductByIDRequest) returns (HideProductByIDResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{id}/hide"
      body: "*"
    };
  }

  // Sets a sale for a product by ID.
  rpc SetSaleByID(SetSaleByIDRequest) returns (SetSaleByIDResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{id}/set/sale"
      body: "*"
    };
  }

  // Reduces stock for specific product sizes.
  rpc ReduceStockForProductSizes(ReduceStockForProductSizesRequest) returns (ReduceStockForProductSizesResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/reducestock"
      body: "*"
    };
  }

  // Restores stock for specific product sizes.
  rpc RestoreStockForProductSizes(RestoreStockForProductSizesRequest) returns (RestoreStockForProductSizesResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/restorestock"
      body: "*"
    };
  }

  // Updates the preorder status for a product.
  rpc UpdateProductPreorder(UpdateProductPreorderRequest) returns (UpdateProductPreorderResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatepreorder"
      body: "*"
    };
  }

  // Updates the name of a product.
  rpc UpdateProductName(UpdateProductNameRequest) returns (UpdateProductNameResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatename"
      body: "*"
    };
  }

  // Updates the SKU of a product.
  rpc UpdateProductSKU(UpdateProductSKURequest) returns (UpdateProductSKUResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updateSKU"
      body: "*"
    };
  }

  // Updates the color and hex value of a product.
  rpc UpdateProductColorAndColorHex(UpdateProductColorAndColorHexRequest) returns (UpdateProductColorAndColorHexResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatecolor"
      body: "*"
    };
  }

  // Updates the country of origin for a product.
  rpc UpdateProductCountryOfOrigin(UpdateProductCountryOfOriginRequest) returns (UpdateProductCountryOfOriginResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatecountry"
      body: "*"
    };
  }

  // Updates the brand of a product.
  rpc UpdateProductBrand(UpdateProductBrandRequest) returns (UpdateProductBrandResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatebrand"
      body: "*"
    };
  }

  // Updates the target gender for a product.
  rpc UpdateProductTargetGender(UpdateProductTargetGenderRequest) returns (UpdateProductTargetGenderResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updategender"
      body: "*"
    };
  }

  // Updates the thumbnail of a product.
  rpc UpdateProductThumbnail(UpdateProductThumbnailRequest) returns (UpdateProductThumbnailResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatethumbnail"
      body: "*"
    };
  }

  // Updates the price of a product.
  rpc UpdateProductPrice(UpdateProductPriceRequest) returns (UpdateProductPriceResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updateprice"
      body: "*"
    };
  }

  // Updates the sale information of a product.
  rpc UpdateProductSale(UpdateProductSaleRequest) returns (UpdateProductSaleResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatesale"
      body: "*"
    };
  }

  // Updates the category of a product.
  rpc UpdateProductCategory(UpdateProductCategoryRequest) returns (UpdateProductCategoryResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatecategory"
      body: "*"
    };
  }

  // Updates the description of a product.
  rpc UpdateProductDescription(UpdateProductDescriptionRequest) returns (UpdateProductDescriptionResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/updatedescription"
      body: "*"
    };
  }

  // Deletes a product's measurement.
  rpc DeleteProductMeasurement(DeleteProductMeasurementRequest) returns (DeleteProductMeasurementResponse) {
    option (google.api.http) = {delete: "/api/admin/product/measurement/{id}/delete"};
  }

  // Adds a new measurement to a product.
  rpc AddProductMeasurement(AddProductMeasurementRequest) returns (AddProductMeasurementResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/measurement/add"
      body: "*"
    };
  }

  // Updates the stock for a specific product size.
  rpc UpdateProductSizeStock(UpdateProductSizeStockRequest) returns (UpdateProductSizeStockResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/size/{size_id}/updatestock"
      body: "*"
    };
  }

  // Deletes media associated with a product.
  rpc DeleteProductMedia(DeleteProductMediaRequest) returns (DeleteProductMediaResponse) {
    option (google.api.http) = {delete: "/api/admin/product/media/{product_media_id}/delete"};
  }

  // Adds media to a product.
  rpc AddProductMedia(AddProductMediaRequest) returns (AddProductMediaResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/media/add"
      body: "*"
    };
  }

  // Adds a tag to a product.
  rpc AddProductTag(AddProductTagRequest) returns (AddProductTagResponse) {
    option (google.api.http) = {
      post: "/api/admin/product/{product_id}/tag/add"
      body: "*"
    };
  }

  // Deletes a tag from a product.
  rpc DeleteProductTag(DeleteProductTagRequest) returns (DeleteProductTagResponse) {
    option (google.api.http) = {delete: "/api/admin/product/{product_id}/tag/{tag}/delete"};
  }

  // PROMO MANAGER

  // Adds a new promotional code
  rpc AddPromo(AddPromoRequest) returns (AddPromoResponse) {
    option (google.api.http) = {
      post: "/api/admin/promo/add"
      body: "*"
    };
  }

  // Lists all promotional codes
  rpc ListPromos(ListPromosRequest) returns (ListPromosResponse) {
    option (google.api.http) = {get: "/api/admin/promo/list"};
  }

  // Deletes a specific promotional code
  rpc DeletePromoCode(DeletePromoCodeRequest) returns (DeletePromoCodeResponse) {
    option (google.api.http) = {delete: "/api/admin/promo/{code}/delete"};
  }

  // Disables a specific promotional code
  rpc DisablePromoCode(DisablePromoCodeRequest) returns (DisablePromoCodeResponse) {
    option (google.api.http) = {
      post: "/api/admin/promo/{code}/disable"
      body: "*"
    };
  }

  // ORDER MANAGER

  // Creates a new order
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/create"
      body: "*"
    };
  }

  // Applies a promo code to an order
  rpc ApplyPromoCode(ApplyPromoCodeRequest) returns (ApplyPromoCodeResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/apply-promo"
      body: "*"
    };
  }

  // Updates items in an existing order
  rpc UpdateOrderItems(UpdateOrderItemsRequest) returns (UpdateOrderItemsResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/update-items"
      body: "*"
    };
  }

  // Updates the shipping carrier for an order
  rpc UpdateOrderShippingCarrier(UpdateOrderShippingCarrierRequest) returns (UpdateOrderShippingCarrierResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/update-shipping-carrier"
      body: "*"
    };
  }

  // Marks order payment as complete
  rpc OrderPaymentDone(OrderPaymentDoneRequest) returns (OrderPaymentDoneResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_uuid}/payment-done"
      body: "*"
    };
  }

  // Updates shipping information for an order
  rpc UpdateShippingInfo(UpdateShippingInfoRequest) returns (UpdateShippingInfoResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/update-shipping-info"
      body: "*"
    };
  }

  // Retrieves an order by its ID
  rpc GetOrderById(GetOrderByIdRequest) returns (GetOrderByIdResponse) {
    option (google.api.http) = {get: "/api/admin/orders/{order_id}"};
  }

  // Retrieves orders by the customer's email
  rpc GetOrdersByEmail(GetOrdersByEmailRequest) returns (GetOrdersByEmailResponse) {
    option (google.api.http) = {get: "/api/admin/orders/by-email/{email}"};
  }

  // Retrieves orders by their status
  rpc GetOrdersByStatus(GetOrdersByStatusRequest) returns (GetOrdersByStatusResponse) {
    option (google.api.http) = {get: "/api/admin/orders/by-status/{status}"};
  }

  // Processes a refund for an order
  rpc RefundOrder(RefundOrderRequest) returns (RefundOrderResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/refund"
      body: "*"
    };
  }

  // Marks an order as delivered
  rpc DeliveredOrder(DeliveredOrderRequest) returns (DeliveredOrderResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/delivered"
      body: "*"
    };
  }

  // Cancels an order
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {
    option (google.api.http) = {
      post: "/api/admin/orders/{order_id}/cancel"
      body: "*"
    };
  }

  // HERO MANAGER

  // Adds a new hero
  rpc AddHero(AddHeroRequest) returns (AddHeroResponse) {
    option (google.api.http) = {
      post: "/api/admin/hero/add"
      body: "*"
    };
  }

  // Retrieves hero information
  rpc GetHero(GetHeroRequest) returns (GetHeroResponse) {
    option (google.api.http) = {get: "/api/admin/hero"};
  }

  // ARCHIVE MANAGER

  // AddArchive creates a new archive.
  rpc AddArchive(AddArchiveRequest) returns (AddArchiveResponse) {
    option (google.api.http) = {
      post: "/api/admin/archive/add"
      body: "*"
    };
  }

  // AddArchiveItems adds items to an existing archive.
  rpc AddArchiveItems(AddArchiveItemsRequest) returns (AddArchiveItemsResponse) {
    option (google.api.http) = {
      post: "/api/admin/archive/add/items"
      body: "*"
    };
  }

  // DeleteArchiveItem deletes an archive item.
  rpc DeleteArchiveItem(DeleteArchiveItemRequest) returns (DeleteArchiveItemResponse) {
    option (google.api.http) = {delete: "/api/admin/archive/delete/item/{item_id}"};
  }

  // GetArchivesPaged retrieves paged archives.
  rpc GetArchivesPaged(GetArchivesPagedRequest) returns (GetArchivesPagedResponse) {
    option (google.api.http) = {get: "/api/admin/archive/paged"};
  }

  // GetArchiveById retrieves an archive by ID.
  rpc GetArchiveById(GetArchiveByIdRequest) returns (GetArchiveByIdResponse) {
    option (google.api.http) = {get: "/api/admin/archive/{id}"};
  }

  // DeleteArchiveById deletes an archive by ID.
  rpc DeleteArchiveById(DeleteArchiveByIdRequest) returns (DeleteArchiveByIdResponse) {
    option (google.api.http) = {delete: "/api/admin/archive/{id}"};
  }
}

// DICITONARY

message GetDictionaryRequest {}

message GetDictionaryResponse {
  common.Dictionary dictionary = 1;
  common.CurrencyMap rates = 2;
}

// MEDIA MANAGER

message UploadContentImageRequest {
  string raw_b64_image = 1;
  string folder = 2;
  string image_name = 3;
}

message UploadContentImageResponse {
  common.Media media = 1;
}

message UploadContentVideoRequest {
  bytes raw = 1;
  string folder = 2;
  string video_name = 3;
  string content_type = 4;
}

message UploadContentVideoResponse {
  common.Media media = 1;
}

message ListObjectsPagedRequest {
  int32 limit = 1;
  int32 offset = 2;
  common.OrderFactor order_factor = 4;
}

message ListObjectsPagedResponse {
  repeated common.Media list = 1;
}

message DeleteFromBucketRequest {
  int32 id = 1;
}

message DeleteFromBucketResponse {}

// PRODUCTS MANAGER

message AddProductRequest {
  common.ProductNew product = 1;
}

message AddProductResponse {
  common.ProductFull product = 1;
}

message GetProductsPagedRequest {
  int32 limit = 1;
  int32 offset = 2;
  repeated common.SortFactor sort_factors = 3;
  common.OrderFactor order_factor = 4;
  common.FilterConditions filter_conditions = 5;
  bool show_hidden = 6;
}

message GetProductsPagedResponse {
  repeated common.Product products = 1;
}

message GetProductByIDRequest {
  int32 id = 1;
}

message GetProductByIDResponse {
  common.ProductFull product = 1;
}

message DeleteProductByIDRequest {
  int32 id = 1;
}

message DeleteProductByIDResponse {}

message HideProductByIDRequest {
  int32 id = 1;
  bool hide = 2;
}

message HideProductByIDResponse {}

message SetSaleByIDRequest {
  int32 id = 1;
  google.type.Decimal sale_percent = 2;
}

message SetSaleByIDResponse {}

message ReduceStockForProductSizesRequest {
  repeated common.OrderItem items = 1;
}

message ReduceStockForProductSizesResponse {}

message RestoreStockForProductSizesRequest {
  repeated common.OrderItem items = 1;
}

message RestoreStockForProductSizesResponse {}

message UpdateProductPreorderRequest {
  int32 product_id = 1;
  string preorder = 2;
}

message UpdateProductPreorderResponse {}

message UpdateProductNameRequest {
  int32 product_id = 1;
  string name = 2;
}

message UpdateProductNameResponse {}

message UpdateProductSKURequest {
  int32 product_id = 1;
  string sku = 2;
}

message UpdateProductSKUResponse {}

message UpdateProductColorAndColorHexRequest {
  int32 product_id = 1;
  string color = 2;
  string color_hex = 3;
}

message UpdateProductColorAndColorHexResponse {}

message UpdateProductCountryOfOriginRequest {
  int32 product_id = 1;
  string country_of_origin = 2;
}

message UpdateProductCountryOfOriginResponse {}

message UpdateProductBrandRequest {
  int32 product_id = 1;
  string brand = 2;
}

message UpdateProductBrandResponse {}

message UpdateProductTargetGenderRequest {
  int32 product_id = 1;
  common.GenderEnum gender = 2;
}

message UpdateProductTargetGenderResponse {}

message UpdateProductThumbnailRequest {
  int32 product_id = 1;
  string thumbnail = 2;
}

message UpdateProductThumbnailResponse {}

message UpdateProductPriceRequest {
  int32 product_id = 1;
  google.type.Decimal price = 2;
}

message UpdateProductPriceResponse {}

message UpdateProductSaleRequest {
  int32 product_id = 1;
  google.type.Decimal sale = 2;
}

message UpdateProductSaleResponse {}

message UpdateProductCategoryRequest {
  int32 product_id = 1;
  int32 category_id = 2;
}

message UpdateProductCategoryResponse {}

message UpdateProductDescriptionRequest {
  int32 product_id = 1;
  string description = 2;
}

message UpdateProductDescriptionResponse {}

message DeleteProductMeasurementRequest {
  int32 id = 1;
}

message DeleteProductMeasurementResponse {}

message AddProductMeasurementRequest {
  int32 product_id = 1;
  int32 size_id = 2;
  int32 measurement_name_id = 3;
  google.type.Decimal measurement_value = 4;
}

message AddProductMeasurementResponse {}

message UpdateProductSizeStockRequest {
  int32 product_id = 1;
  int32 size_id = 2;
  int32 quantity = 3;
}

message UpdateProductSizeStockResponse {}

message DeleteProductMediaRequest {
  int32 product_media_id = 1;
}

message DeleteProductMediaResponse {}

message AddProductMediaRequest {
  int32 product_id = 1;
  string full_size = 2;
  string thumbnail = 3;
  string compressed = 4;
}

message AddProductMediaResponse {}

message AddProductTagRequest {
  int32 product_id = 1;
  string tag = 2;
}

message AddProductTagResponse {}

message DeleteProductTagRequest {
  int32 product_id = 1;
  string tag = 2;
}

message DeleteProductTagResponse {}

// PROMO MANAGER

message AddPromoRequest {
  common.PromoCodeInsert promo = 1;
}
message AddPromoResponse {}

message ListPromosRequest {}
message ListPromosResponse {
  repeated common.PromoCode promo_codes = 1;
}

message DeletePromoCodeRequest {
  string code = 1;
}
message DeletePromoCodeResponse {}

message DisablePromoCodeRequest {
  string code = 1;
}
message DisablePromoCodeResponse {}

// ORDER MANAGER

message CreateOrderRequest {
  common.OrderNew order = 1;
}

message CreateOrderResponse {
  common.Order order = 1;
}

message ApplyPromoCodeRequest {
  int32 order_id = 1;
  string promo_code = 2;
}

message ApplyPromoCodeResponse {
  google.type.Decimal total = 1;
}

message UpdateOrderItemsRequest {
  int32 order_id = 1;
  repeated common.OrderItemInsert items = 2;
}

message UpdateOrderItemsResponse {
  google.type.Decimal total = 1;
}

message UpdateOrderShippingCarrierRequest {
  int32 order_id = 1;
  int32 shipping_carrier_id = 2;
}

message UpdateOrderShippingCarrierResponse {
  google.type.Decimal total = 1;
}

message OrderPaymentDoneRequest {
  string order_uuid = 1;
  common.PaymentInsert payment = 2;
}

message OrderPaymentDoneResponse {}

message UpdateShippingInfoRequest {
  int32 order_id = 1;
  common.Shipment shipping_info = 2;
}

message UpdateShippingInfoResponse {}

message GetOrderByIdRequest {
  int32 order_id = 1;
}

message GetOrderByIdResponse {
  common.OrderFull order = 1;
}

message GetOrdersByEmailRequest {
  string email = 1;
}

message GetOrdersByEmailResponse {
  repeated common.OrderFull orders = 1;
}

message GetOrdersByStatusRequest {
  common.OrderStatusEnum status = 1;
}

message GetOrdersByStatusResponse {
  repeated common.OrderFull orders = 1;
}

message RefundOrderRequest {
  int32 order_id = 1;
}

message RefundOrderResponse {}

message DeliveredOrderRequest {
  int32 order_id = 1;
}

message DeliveredOrderResponse {}

message CancelOrderRequest {
  int32 order_id = 1;
}

message CancelOrderResponse {}

// HERO MANAGER

message AddHeroRequest {
  common.HeroInsert main = 1;
  repeated common.HeroInsert ads = 2;
  repeated int32 product_ids = 3;
}

message AddHeroResponse {}

message GetHeroRequest {}

message GetHeroResponse {
  common.HeroFull hero = 1;
}

// ARCHIVE MANAGER

message AddArchiveRequest {
  common.ArchiveNew archive_new = 1;
}

message AddArchiveResponse {
  int32 id = 1;
}

message AddArchiveItemsRequest {
  int32 archive_id = 1;
  repeated common.ArchiveItemInsert items = 2;
}

message AddArchiveItemsResponse {
  string message = 1;
}

message DeleteArchiveItemRequest {
  int32 item_id = 1;
}

message DeleteArchiveItemResponse {}

message GetArchivesPagedRequest {
  int32 limit = 1;
  int32 offset = 2;
  common.OrderFactor order_factor = 3;
}

message GetArchivesPagedResponse {
  repeated common.ArchiveFull archives = 1;
}

message GetArchiveByIdRequest {
  int32 id = 1;
}

message GetArchiveByIdResponse {
  common.ArchiveFull archive = 1;
}

message DeleteArchiveByIdRequest {
  int32 id = 1;
}

message DeleteArchiveByIdResponse {
  string message = 1;
}
