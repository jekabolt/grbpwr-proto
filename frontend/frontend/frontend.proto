syntax = "proto3";

package frontend;

import "common/archive.proto";
import "common/dict.proto";
import "common/filter.proto";
import "common/hero.proto";
import "common/order.proto";
import "common/payment.proto";
import "common/product.proto";
import "common/promo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/type/decimal.proto";

option go_package = "github.com/jekabolt/grbpwr-products-manager/proto/frontend;frontend";

service FrontendService {
  // Get hero information
  rpc GetHero(GetHeroRequest) returns (GetHeroResponse) {
    option (google.api.http) = {get: "/api/frontend/hero"};
  }

  // Get product brand and name
  rpc GetProduct(GetProductRequest) returns (GetProductResponse) {
    option (google.api.http) = {get: "/api/frontend/product/{gender}/{brand}/{name}/{id}"};
  }

  // Get paged products
  rpc GetProductsPaged(GetProductsPagedRequest) returns (GetProductsPagedResponse) {
    option (google.api.http) = {get: "/api/frontend/products/paged"};
  }

  // Submit an order
  rpc SubmitOrder(SubmitOrderRequest) returns (SubmitOrderResponse) {
    option (google.api.http) = {
      post: "/api/frontend/order/new"
      body: "*"
    };
  }

  // Retrieves an order by its ID
  rpc GetOrderByUUID(GetOrderByUUIDRequest) returns (GetOrderByUUIDResponse) {
    option (google.api.http) = {get: "/api/frontend/order/{order_uuid}"};
  }

  rpc ValidateOrderItemsInsert(ValidateOrderItemsInsertRequest) returns (ValidateOrderItemsInsertResponse) {
    option (google.api.http) = {
      post: "/api/frontend/orders/validate-items"
      body: "*"
    };
  }

  rpc ValidateOrderByUUID(ValidateOrderByUUIDRequest) returns (ValidateOrderByUUIDResponse) {
    option (google.api.http) = {
      post: "/api/frontend/orders/validate/{order_uuid}"
      body: "*"
    };
  }

  // Generate an invoice for the order or return the existing one
  rpc GetOrderInvoice(GetOrderInvoiceRequest) returns (GetOrderInvoiceResponse) {
    option (google.api.http) = {
      post: "/api/frontend/order/{order_uuid}/{payment_method}/invoice"
      body: "*"
    };
  }

  // Cancel an invoice for the order
  rpc CancelOrderInvoice(CancelOrderInvoiceRequest) returns (CancelOrderInvoiceResponse) {
    option (google.api.http) = {
      post: "/api/frontend/order/{order_uuid}/invoice/cancel"
      body: "*"
    };
  }

  // CheckPayment checks the crypto payment if it has been received and updates the order status if it has been received
  rpc CheckPayment(CheckPaymentRequest) returns (CheckPaymentResponse) {
    option (google.api.http) = {get: "/api/frontend/order/check/{order_uuid}"};
  }

  // Subscribe to the newsletter
  rpc SubscribeNewsletter(SubscribeNewsletterRequest) returns (SubscribeNewsletterResponse) {
    option (google.api.http) = {
      post: "/api/frontend/newsletter/subscribe"
      body: "*"
    };
  }

  // Unsubscribe from the newsletter
  rpc UnsubscribeNewsletter(UnsubscribeNewsletterRequest) returns (UnsubscribeNewsletterResponse) {
    option (google.api.http) = {
      post: "/api/frontend/newsletter/unsubscribe"
      body: "*"
    };
  }

  // GetArchivesPaged retrieves paged archives.
  rpc GetArchivesPaged(GetArchivesPagedRequest) returns (GetArchivesPagedResponse) {
    option (google.api.http) = {get: "/api/frontend/archive/paged"};
  }
}

message GetHeroRequest {}
message GetHeroResponse {
  common.HeroFull hero = 1;
  common.Dictionary dictionary = 2;
  common.CurrencyMap rates = 3;
}

message GetProductRequest {
  string gender = 1;
  string brand = 2;
  string name = 3;
  int32 id = 4;
}

message GetProductResponse {
  common.ProductFull product = 1;
}

message GetProductsPagedRequest {
  int32 limit = 1;
  int32 offset = 2;
  repeated common.SortFactor sort_factors = 3;
  common.OrderFactor order_factor = 4;
  common.FilterConditions filter_conditions = 5;
}

message GetProductsPagedResponse {
  repeated common.Product products = 1;
  int32 total = 2;
}

message SubmitOrderRequest {
  common.OrderNew order = 1;
}

message SubmitOrderResponse {
  string order_uuid = 1;
  common.OrderStatusEnum order_status = 2;
  google.protobuf.Timestamp expired_at = 3;
  common.PaymentInsert payment = 4;
}

message GetOrderByUUIDRequest {
  string order_uuid = 1;
}

message GetOrderByUUIDResponse {
  common.OrderFull order = 1;
}

message ValidateOrderItemsInsertRequest {
  repeated common.OrderItemInsert items = 1;
  string promo_code = 2;
  int32 shipment_carrier_id = 3;
}

message ValidateOrderItemsInsertResponse {
  repeated common.OrderItem valid_items = 1;
  bool has_changed = 2;
  google.type.Decimal subtotal = 3;
  google.type.Decimal total_sale = 4;
  common.PromoCodeInsert promo = 5;
}

message ValidateOrderByUUIDRequest {
  string order_uuid = 1;
}

message ValidateOrderByUUIDResponse {
  common.OrderFull order = 1;
}

message GetOrderInvoiceRequest {
  string order_uuid = 1;
  common.PaymentMethodNameEnum payment_method = 2;
}

message GetOrderInvoiceResponse {
  google.protobuf.Timestamp expired_at = 1;
  common.PaymentInsert payment = 2;
}

message CancelOrderInvoiceRequest {
  string order_uuid = 1;
}

message CancelOrderInvoiceResponse {}

message CheckPaymentRequest {
  string order_uuid = 1;
}

message CheckPaymentResponse {
  common.Payment payment = 1;
}

message SubscribeNewsletterRequest {
  string email = 1;
}

message SubscribeNewsletterResponse {}

message UnsubscribeNewsletterRequest {
  string email = 1;
}

message UnsubscribeNewsletterResponse {}

message GetArchivesPagedRequest {
  int32 limit = 1;
  int32 offset = 2;
  common.OrderFactor order_factor = 3;
}

message GetArchivesPagedResponse {
  repeated common.ArchiveFull archives = 1;
}
